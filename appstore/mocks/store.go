// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/awa/go-iap/appstore/api (interfaces: StoreAPIClient)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/store.go -package=mocks github.com/awa/go-iap/appstore/api StoreAPIClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"
	time "time"

	api "github.com/awa/go-iap/appstore/api"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreAPIClient is a mock of StoreAPIClient interface.
type MockStoreAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreAPIClientMockRecorder
	isgomock struct{}
}

// MockStoreAPIClientMockRecorder is the mock recorder for MockStoreAPIClient.
type MockStoreAPIClientMockRecorder struct {
	mock *MockStoreAPIClient
}

// NewMockStoreAPIClient creates a new mock instance.
func NewMockStoreAPIClient(ctrl *gomock.Controller) *MockStoreAPIClient {
	mock := &MockStoreAPIClient{ctrl: ctrl}
	mock.recorder = &MockStoreAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreAPIClient) EXPECT() *MockStoreAPIClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockStoreAPIClient) Do(ctx context.Context, method, url string, body io.Reader) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, method, url, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockStoreAPIClientMockRecorder) Do(ctx, method, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockStoreAPIClient)(nil).Do), ctx, method, url, body)
}

// ExtendSubscriptionRenewalDate mocks base method.
func (m *MockStoreAPIClient) ExtendSubscriptionRenewalDate(ctx context.Context, originalTransactionId string, body api.ExtendRenewalDateRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendSubscriptionRenewalDate", ctx, originalTransactionId, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendSubscriptionRenewalDate indicates an expected call of ExtendSubscriptionRenewalDate.
func (mr *MockStoreAPIClientMockRecorder) ExtendSubscriptionRenewalDate(ctx, originalTransactionId, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendSubscriptionRenewalDate", reflect.TypeOf((*MockStoreAPIClient)(nil).ExtendSubscriptionRenewalDate), ctx, originalTransactionId, body)
}

// ExtendSubscriptionRenewalDateForAll mocks base method.
func (m *MockStoreAPIClient) ExtendSubscriptionRenewalDateForAll(ctx context.Context, body api.MassExtendRenewalDateRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendSubscriptionRenewalDateForAll", ctx, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendSubscriptionRenewalDateForAll indicates an expected call of ExtendSubscriptionRenewalDateForAll.
func (mr *MockStoreAPIClientMockRecorder) ExtendSubscriptionRenewalDateForAll(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendSubscriptionRenewalDateForAll", reflect.TypeOf((*MockStoreAPIClient)(nil).ExtendSubscriptionRenewalDateForAll), ctx, body)
}

// GetALLSubscriptionStatuses mocks base method.
func (m *MockStoreAPIClient) GetALLSubscriptionStatuses(ctx context.Context, originalTransactionId string, query *url.Values) (*api.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALLSubscriptionStatuses", ctx, originalTransactionId, query)
	ret0, _ := ret[0].(*api.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALLSubscriptionStatuses indicates an expected call of GetALLSubscriptionStatuses.
func (mr *MockStoreAPIClientMockRecorder) GetALLSubscriptionStatuses(ctx, originalTransactionId, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALLSubscriptionStatuses", reflect.TypeOf((*MockStoreAPIClient)(nil).GetALLSubscriptionStatuses), ctx, originalTransactionId, query)
}

// GetAllNotificationHistory mocks base method.
func (m *MockStoreAPIClient) GetAllNotificationHistory(ctx context.Context, body api.NotificationHistoryRequest, duration time.Duration) ([]api.NotificationHistoryResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotificationHistory", ctx, body, duration)
	ret0, _ := ret[0].([]api.NotificationHistoryResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotificationHistory indicates an expected call of GetAllNotificationHistory.
func (mr *MockStoreAPIClientMockRecorder) GetAllNotificationHistory(ctx, body, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotificationHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetAllNotificationHistory), ctx, body, duration)
}

// GetNotificationHistory mocks base method.
func (m *MockStoreAPIClient) GetNotificationHistory(ctx context.Context, body api.NotificationHistoryRequest, paginationToken string) (*api.NotificationHistoryResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationHistory", ctx, body, paginationToken)
	ret0, _ := ret[0].(*api.NotificationHistoryResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationHistory indicates an expected call of GetNotificationHistory.
func (mr *MockStoreAPIClientMockRecorder) GetNotificationHistory(ctx, body, paginationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetNotificationHistory), ctx, body, paginationToken)
}

// GetRefundHistory mocks base method.
func (m *MockStoreAPIClient) GetRefundHistory(ctx context.Context, originalTransactionId string) ([]*api.RefundLookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundHistory", ctx, originalTransactionId)
	ret0, _ := ret[0].([]*api.RefundLookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundHistory indicates an expected call of GetRefundHistory.
func (mr *MockStoreAPIClientMockRecorder) GetRefundHistory(ctx, originalTransactionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetRefundHistory), ctx, originalTransactionId)
}

// GetSubscriptionRenewalDataStatus mocks base method.
func (m *MockStoreAPIClient) GetSubscriptionRenewalDataStatus(ctx context.Context, productId, requestIdentifier string) (int, *api.MassExtendRenewalDateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRenewalDataStatus", ctx, productId, requestIdentifier)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*api.MassExtendRenewalDateStatusResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubscriptionRenewalDataStatus indicates an expected call of GetSubscriptionRenewalDataStatus.
func (mr *MockStoreAPIClientMockRecorder) GetSubscriptionRenewalDataStatus(ctx, productId, requestIdentifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRenewalDataStatus", reflect.TypeOf((*MockStoreAPIClient)(nil).GetSubscriptionRenewalDataStatus), ctx, productId, requestIdentifier)
}

// GetTestNotificationStatus mocks base method.
func (m *MockStoreAPIClient) GetTestNotificationStatus(ctx context.Context, testNotificationToken string) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestNotificationStatus", ctx, testNotificationToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTestNotificationStatus indicates an expected call of GetTestNotificationStatus.
func (mr *MockStoreAPIClientMockRecorder) GetTestNotificationStatus(ctx, testNotificationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestNotificationStatus", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTestNotificationStatus), ctx, testNotificationToken)
}

// GetTransactionHistory mocks base method.
func (m *MockStoreAPIClient) GetTransactionHistory(ctx context.Context, originalTransactionId string, query *url.Values) ([]*api.HistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, originalTransactionId, query)
	ret0, _ := ret[0].([]*api.HistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockStoreAPIClientMockRecorder) GetTransactionHistory(ctx, originalTransactionId, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTransactionHistory), ctx, originalTransactionId, query)
}

// GetTransactionInfo mocks base method.
func (m *MockStoreAPIClient) GetTransactionInfo(ctx context.Context, transactionId string) (*api.TransactionInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionInfo", ctx, transactionId)
	ret0, _ := ret[0].(*api.TransactionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInfo indicates an expected call of GetTransactionInfo.
func (mr *MockStoreAPIClientMockRecorder) GetTransactionInfo(ctx, transactionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInfo", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTransactionInfo), ctx, transactionId)
}

// LookupOrderID mocks base method.
func (m *MockStoreAPIClient) LookupOrderID(ctx context.Context, orderId string) (*api.OrderLookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupOrderID", ctx, orderId)
	ret0, _ := ret[0].(*api.OrderLookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupOrderID indicates an expected call of LookupOrderID.
func (mr *MockStoreAPIClientMockRecorder) LookupOrderID(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupOrderID", reflect.TypeOf((*MockStoreAPIClient)(nil).LookupOrderID), ctx, orderId)
}

// ParseJWSEncodeString mocks base method.
func (m *MockStoreAPIClient) ParseJWSEncodeString(jwsEncode string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWSEncodeString", jwsEncode)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWSEncodeString indicates an expected call of ParseJWSEncodeString.
func (mr *MockStoreAPIClientMockRecorder) ParseJWSEncodeString(jwsEncode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWSEncodeString", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseJWSEncodeString), jwsEncode)
}

// ParseSignedTransaction mocks base method.
func (m *MockStoreAPIClient) ParseSignedTransaction(transaction string) (*api.JWSTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSignedTransaction", transaction)
	ret0, _ := ret[0].(*api.JWSTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignedTransaction indicates an expected call of ParseSignedTransaction.
func (mr *MockStoreAPIClientMockRecorder) ParseSignedTransaction(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignedTransaction", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseSignedTransaction), transaction)
}

// ParseSignedTransactions mocks base method.
func (m *MockStoreAPIClient) ParseSignedTransactions(transactions []string) ([]*api.JWSTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSignedTransactions", transactions)
	ret0, _ := ret[0].([]*api.JWSTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignedTransactions indicates an expected call of ParseSignedTransactions.
func (mr *MockStoreAPIClientMockRecorder) ParseSignedTransactions(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignedTransactions", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseSignedTransactions), transactions)
}

// SendConsumptionInfo mocks base method.
func (m *MockStoreAPIClient) SendConsumptionInfo(ctx context.Context, originalTransactionId string, body api.ConsumptionRequestBody) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsumptionInfo", ctx, originalTransactionId, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendConsumptionInfo indicates an expected call of SendConsumptionInfo.
func (mr *MockStoreAPIClientMockRecorder) SendConsumptionInfo(ctx, originalTransactionId, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsumptionInfo", reflect.TypeOf((*MockStoreAPIClient)(nil).SendConsumptionInfo), ctx, originalTransactionId, body)
}

// SendRequestTestNotification mocks base method.
func (m *MockStoreAPIClient) SendRequestTestNotification(ctx context.Context) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestTestNotification", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendRequestTestNotification indicates an expected call of SendRequestTestNotification.
func (mr *MockStoreAPIClientMockRecorder) SendRequestTestNotification(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestTestNotification", reflect.TypeOf((*MockStoreAPIClient)(nil).SendRequestTestNotification), ctx)
}
